import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,d as e}from"./app.fec28137.js";const p={},t=e(`<h1 id="go中的指针" tabindex="-1"><a class="header-anchor" href="#go中的指针" aria-hidden="true">#</a> Go中的指针</h1><p>要搞明白Go语言中的指针需要先知道三个概念</p><ul><li>指针地址</li><li>指针类型</li><li>指针取值</li></ul><p>Go语言中的指针操作非常简单，我们只需要记住两个符号：&amp;：取地址，*：根据地址取值</p><h2 id="关于指针" tabindex="-1"><a class="header-anchor" href="#关于指针" aria-hidden="true">#</a> 关于指针</h2><p>我们知道变量是用来存储数据的，变量的本质是给存储数据的内存地址起了一个好记的别名。比如我们定义了一个变量a:=10，这个时候可以直接通过a这个变量来读取内存中保存的10这个值。在计算机底层a这个变量其实对应了一个内存地址。</p><p>指针也是一个变量，但它是一种特殊的变量，它存储的数据不是一个普通的值，而是另一个变量的内存地址。</p><p><img src="https://cdn.jsdelivr.net/gh/HometownDream/blogImage@main/imgJavaToGo202212221435225.png" alt="image-20200721083711830"></p><h2 id="指针地址和指针类型" tabindex="-1"><a class="header-anchor" href="#指针地址和指针类型" aria-hidden="true">#</a> 指针地址和指针类型</h2><p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go 语言中使用&amp;字符放在变量前面对变量进行取地址操作。Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>*int、，*int64、*string等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>取变量指针的语法如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li>v：代表被取地址的变量，类型为T</li><li>ptr：用于接收地址的变量，ptr的类型就为*T，被称做T的指针类型。* 代表指针</li></ul><p>举个例子：</p><p><img src="https://cdn.jsdelivr.net/gh/HometownDream/blogImage@main/imgJavaToGo202212221435226.png" alt="image-20200721084549011"></p><h2 id="指针取值" tabindex="-1"><a class="header-anchor" href="#指针取值" aria-hidden="true">#</a> 指针取值</h2><p>在对普通变量进行&amp;操作符取地址后，会获得这个变量指针，然后可以对指针使用*操作，也就是指针取值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 指针取值</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">20</span>
<span class="token comment">// 得到c的地址，赋值给d</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token operator">&amp;</span>c
<span class="token comment">// 打印d的值，也就是c的地址</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment">// 取出d指针所对应的值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>d<span class="token punctuation">)</span>
<span class="token comment">// c对应地址的值，改成30</span>
<span class="token operator">*</span>d <span class="token operator">=</span> <span class="token number">30</span>
<span class="token comment">// c已经变成30了</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改变内存中的值，会直接改变原来的变量值</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 这个类似于值传递</span>
<span class="token keyword">func</span> <span class="token function">fn4</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
<span class="token comment">// 这个类似于引用数据类型</span>
<span class="token keyword">func</span> <span class="token function">fn5</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">*</span>x <span class="token operator">=</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x <span class="token operator">:=</span> <span class="token number">5</span>
	<span class="token function">fn4</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	<span class="token function">fn5</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了两个方法，一个是传入局部变量，一个是传入指针类型，最后运行得到的结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">5</span>
<span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new和make函数" tabindex="-1"><a class="header-anchor" href="#new和make函数" aria-hidden="true">#</a> new和make函数</h2><p>需要注意的是，指针必须在创建内存后才可以使用，这个和 slice 和 map是一样的</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 引用数据类型map、slice等，必须使用make分配空间，才能够使用</span>
<span class="token keyword">var</span> userInfo <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
userInfo<span class="token punctuation">[</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span>

<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于指针变量来说</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 指针变量初始化</span>
<span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span>
<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码会引发panic，为什么呢？在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。Go 语言中new和make是内建的两个函数，主要用来分配内存。</p><p>这个时候，我们就需要使用new关键字来分配内存，new是一个内置的函数，它的函数签名如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">new</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span> <span class="token operator">*</span>Type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中</p><ul><li>Type表示类型，new函数只接受一个参数，这个参数是一个类型</li><li>*Type表示类型指针，new函数返回一个指向该类型内存地址的指针</li></ul><p>实际开发中new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 使用new关键字创建指针</span>
aPoint <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
bPoint <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T \\n&quot;</span><span class="token punctuation">,</span> aPoint<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T \\n&quot;</span><span class="token punctuation">,</span> bPoint<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>aPoint<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>bPoint<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本节开始的示例代码中 var a *int 只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。</p><p>make也是用于内存分配的，区别于new，它只用于slice、map以及channel的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。make函数的函数签名如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">make</span><span class="token punctuation">(</span>t Type<span class="token punctuation">,</span> size <span class="token operator">...</span>IntegerType<span class="token punctuation">)</span> Type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>make函数是无可替代的，我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作。</p><h2 id="make和new的区别" tabindex="-1"><a class="header-anchor" href="#make和new的区别" aria-hidden="true">#</a> make和new的区别</h2><ul><li>两者都是用来做内存分配的</li><li>make只能用于slice、map以及channel的初始化，返回的还是这三个引用类型的本身</li><li>而new用于类型的内存分配，并且内存对应的值为类型的零值，返回的是指向类型的指针</li></ul>`,42),o=[t];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","11_Go中的指针.html.vue"]]);export{d as default};
