import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as p,a as n,e as o,b as i,d as s,r as c}from"./app.fec28137.js";const l={},u=s(`<h1 id="golang的数据类型" tabindex="-1"><a class="header-anchor" href="#golang的数据类型" aria-hidden="true">#</a> Golang的数据类型</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Go 语言中数据类型分为：基本数据类型和复合数据类型基本数据类型有：</p><p>整型、浮点型、布尔型、字符串</p><p>复合数据类型有：</p><p>数组、切片、结构体、函数、map、通道（channel）、接口等。</p><h2 id="整型" tabindex="-1"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> 整型</h2><p>整型的类型有很多中，包括 int8，int16，int32，int64。我们可以根据具体的情况来进行定义</p><p>如果我们直接写 int也是可以的，它在不同的操作系统中，int的大小是不一样的</p><ul><li>32位操作系统：int -&gt; int32</li><li>64位操作系统：int -&gt; int64</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HometownDream/blogImage@main/imgJavaToGo202212221426087.png" alt="image-20200719084018801"></p><blockquote><p>可以通过unsafe.Sizeof 查看不同长度的整型，在内存里面的存储空间</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var num2 = 12
fmt.Println(unsafe.Sizeof(num2))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>通过在变量前面添加指定类型，就可以进行强制类型转换</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a1 <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> a2 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token function">int32</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token operator">+</span> a2
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，高位转低位的时候，需要注意，会存在精度丢失，比如上述16转8位的时候，就丢失了</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> n1 <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">130</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">int8</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 变成 -126</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字字面量语法" tabindex="-1"><a class="header-anchor" href="#数字字面量语法" aria-hidden="true">#</a> 数字字面量语法</h3><p>Go1.13版本之后，引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v <span class="token operator">:=</span> <span class="token number">0b00101101</span>  <span class="token comment">// 代表二进制的101101</span>
v：<span class="token operator">=</span> Oo377       <span class="token comment">// 代表八进制的377</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进制转换" tabindex="-1"><a class="header-anchor" href="#进制转换" aria-hidden="true">#</a> 进制转换</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">17</span>
<span class="token comment">// 原样输出</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
<span class="token comment">// 十进制输出</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
<span class="token comment">// 以八进制输出</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
<span class="token comment">// 以二进制输出</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%b\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
<span class="token comment">// 以十六进制输出</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型" aria-hidden="true">#</a> 浮点型</h2><p>Go语言支持两种浮点型数：float32和float64。这两种浮点型数据格式遵循IEEE754标准：</p><p>float32的浮点数的最大范围约为3.4e38，可以使用常量定义：math.MaxFloat32。float64的浮点数的最大范围约为1.8e308，可以使用一个常量定义：math.MaxFloat64</p><p>打印浮点数时，可以使用fmt包配合动词%f，代码如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> pi <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi
<span class="token comment">// 打印浮点类型，默认小数点6位</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span>
<span class="token comment">// 打印浮点类型，打印小数点后2位</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.2f\\n&quot;</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="golang中精度丢失的问题" tabindex="-1"><a class="header-anchor" href="#golang中精度丢失的问题" aria-hidden="true">#</a> Golang中精度丢失的问题</h3><p>几乎所有的编程语言都有精度丢失的问题，这是典型的二进制浮点数精度损失问题，在定长条件下，二进制小数和十进制小数互转可能有精度丢失</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>d <span class="token operator">:=</span> <span class="token number">1129.6</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">//输出112959.99999999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法，使用第三方包来解决精度损失的问题</p>`,31),r={href:"http://github.com/shopspring/decimal",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型" aria-hidden="true">#</a> 布尔类型</h2><p>定义</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> fl <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">if</span> f1 <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h2><p>Go 语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64等）一样。Go语言里的字符串的内部实现使用UTF-8编码。字符串的值为双引号（&quot;）中的内容，可以在Go语言的源码中直接添加非ASCll码字符，例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>s1 <span class="token operator">:=</span> <span class="token string">&quot;hello&quot;</span>
s1 <span class="token operator">:=</span> <span class="token string">&quot;你好&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要定义多行字符串，可以使用反引号</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">\`第一行
第二行\`</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串常见操作" tabindex="-1"><a class="header-anchor" href="#字符串常见操作" aria-hidden="true">#</a> 字符串常见操作</h3><ul><li>len(str)：求长度</li><li>+或fmt.Sprintf：拼接字符串</li><li>strings.Split：分割</li><li>strings.contains：判断是否包含</li><li>strings.HasPrefix，strings.HasSuffix：前缀/后缀判断</li><li>strings.Index()，strings.LastIndex()：子串出现的位置</li><li>strings.Join()：join操作</li><li>strings.Index()：判断在字符串中的位置</li></ul><h2 id="byte-和-rune类型" tabindex="-1"><a class="header-anchor" href="#byte-和-rune类型" aria-hidden="true">#</a> byte 和 rune类型</h2><p>组成每个字符串的元素叫做 “字符”，可以通过遍历字符串元素获得字符。字符用单引号 &#39;&#39; 包裹起来</p><p>Go语言中的字符有以下两种类型</p><ul><li>uint8类型：或者叫byte型，代表了ACII码的一个字符,是uint8的别名</li><li>rune类型：代表一个UTF-8字符，是int32的别名</li></ul><p>当需要处理中文，日文或者其他复合字符时，则需要用到rune类型，rune类型实际上是一个int32</p><p>Go使用了特殊的rune类型来处理Unicode，让基于Unicode的文本处理更为方便，也可以使用byte型进行默认字符串处理，性能和扩展性都有照顾。</p><p>需要注意的是，在go语言中，一个汉字占用3个字节（utf-8），一个字母占用1个字节</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
	<span class="token comment">// 输出的是ASCII码值，也就是说当我们直接输出byte（字符）的时候，输出的是这个字符对应的码值</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token comment">// 输出的是字符</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>

	<span class="token comment">// for循环打印字符串里面的字符</span>
	<span class="token comment">// 通过len来循环的，相当于打印的是ASCII码</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;你好 golang&quot;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v(%c)\\t&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 通过rune打印的是 utf-8字符</span>
	<span class="token keyword">for</span> index<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改字符串" tabindex="-1"><a class="header-anchor" href="#修改字符串" aria-hidden="true">#</a> 修改字符串</h3><p>要修改字符串，需要先将其转换成[]rune 或 []byte类型，完成后在转换成string，无论哪种转换都会重新分配内存，并复制字节数组</p><p>转换为 []byte 类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 字符串转换</span>
s1 <span class="token operator">:=</span> <span class="token string">&quot;big&quot;</span>
byteS1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
byteS1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;p&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteS1<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转换为rune类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// rune类型</span>
s2 <span class="token operator">:=</span> <span class="token string">&quot;你好golang&quot;</span>
byteS2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
byteS2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;我&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteS2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本数据类型转换" tabindex="-1"><a class="header-anchor" href="#基本数据类型转换" aria-hidden="true">#</a> 基本数据类型转换</h2><h3 id="数值类型转换" tabindex="-1"><a class="header-anchor" href="#数值类型转换" aria-hidden="true">#</a> 数值类型转换</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 整型和浮点型之间转换</span>
<span class="token keyword">var</span> aa <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">var</span> bb <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">40</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">int16</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span> <span class="token operator">+</span> bb<span class="token punctuation">)</span>

<span class="token comment">// 建议整型转换成浮点型</span>
<span class="token keyword">var</span> cc <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">var</span> dd <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">40</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">float32</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token operator">+</span> dd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议从低位转换成高位，这样可以避免</p><h3 id="转换成字符串类型" tabindex="-1"><a class="header-anchor" href="#转换成字符串类型" aria-hidden="true">#</a> 转换成字符串类型</h3><p>第一种方式，就是通过 fmt.Sprintf()来转换</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 字符串类型转换</span>
<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">var</span> f <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">12.456</span>
<span class="token keyword">var</span> t <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">var</span> b <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>
str1 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;类型：%v-%T \\n&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str1<span class="token punctuation">)</span>

str2 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;类型：%v-%T \\n&quot;</span><span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str2<span class="token punctuation">)</span>

str3 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%t&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;类型：%v-%T \\n&quot;</span><span class="token punctuation">,</span> str3<span class="token punctuation">,</span> str3<span class="token punctuation">)</span>

str4 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;类型：%v-%T \\n&quot;</span><span class="token punctuation">,</span> str4<span class="token punctuation">,</span> str4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方法就是通过strconv包里面的集中转换方法进行转换</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// int类型转换str类型</span>
<span class="token keyword">var</span> num1 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">20</span>
s1 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;转换：%v - %T&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>

<span class="token comment">// float类型转换成string类型</span>
<span class="token keyword">var</span> num2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">3.1415926</span>

<span class="token comment">/*
		参数1：要转换的值
		参数2：格式化类型 &#39;f&#39;表示float，&#39;b&#39;表示二进制，‘e’表示 十进制
		参数3：表示保留的小数点，-1表示不对小数点格式化
		参数4：格式化的类型，传入64位 或者 32位
	 */</span>
s2 <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;转换：%v-%T&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串转换成int-和-float类型" tabindex="-1"><a class="header-anchor" href="#字符串转换成int-和-float类型" aria-hidden="true">#</a> 字符串转换成int 和 float类型</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>str <span class="token operator">:=</span> <span class="token string">&quot;10&quot;</span>
<span class="token comment">// 第一个参数：需要转换的数，第二个参数：进制， 参数三：32位或64位</span>
num<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>

<span class="token comment">// 转换成float类型</span>
str2 <span class="token operator">:=</span> <span class="token string">&quot;3.141592654&quot;</span>
num<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function k(v,m){const a=c("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",r,[o("http://github.com/shopspring/decimal"),i(a)])]),d])}const f=t(l,[["render",k],["__file","3_Go的数据类型.html.vue"]]);export{f as default};
