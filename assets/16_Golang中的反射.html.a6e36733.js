import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,a as s,e as n,b as c,d as a,r as i}from"./app.fec28137.js";const u={},l=a(`<h1 id="go中的反射" tabindex="-1"><a class="header-anchor" href="#go中的反射" aria-hidden="true">#</a> Go中的反射</h1><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><p>有时我们需要写一个函数，这个函数有能力统一处理各种值类型，而这些类型可能无法共享同一个接口，也可能布局未知，也有可能这个类型在我们设计函数时还不存在，这个时候我们就可以用到反射。</p><p>空接口可以存储任意类型的变量，那我们如何知道这个空接口保存数据的类型是什么？ 值是什么呢？</p><ul><li>可以使用类型断言</li><li>可以使用反射实现，也就是在程序运行时动态的获取一个变量的类型信息和值信息。</li></ul><p>把结构体序列化成json字符串，自定义结构体Tab标签的时候就用到了反射</p><p>后面所说的ORM框架，底层就是用到了反射技术</p><p>ORM：对象关系映射（Object Relational Mapping，简称 ORM）是通过使用描述对象和数据库之间的映射的元数据，将面向对象语言程序中的对象自动持久化到关系数据库中。</p><h2 id="反射的基本介绍" tabindex="-1"><a class="header-anchor" href="#反射的基本介绍" aria-hidden="true">#</a> 反射的基本介绍</h2><p>反射是指在程序运行期间对程序本身进行访问和修改的能力。正常情况程序在编译时，变量被转换为内存地址，变量名不会被编译器写入到可执行部分。在运行程序时，程序无法获取自身的信息。支持反射的语言可以在程序编译期将变量的反射信息，如字段名称、类型信息、结构体信息等整合到可执行文件中，并给程序提供接口访问反射信息，这样就可以在程序运行期获取类型的反射信息，并且有能力修改它们。</p><h2 id="go可以实现的功能" tabindex="-1"><a class="header-anchor" href="#go可以实现的功能" aria-hidden="true">#</a> Go可以实现的功能</h2><ul><li>反射可以在程序运行期间动态的获取变量的各种信息，比如变量的类型类别</li><li>如果是结构体，通过反射还可以获取结构体本身的信息，比如结构体的字段、结构体的方法。</li><li>通过反射，可以修改变量的值，可以调用关联的方法</li></ul><p>Go语言中的变量是分为两部分的：</p><ul><li>类型信息：预先定义好的元信息。</li><li>值信息：程序运行过程中可动态变化的。</li></ul><p>在Go语言的反射机制中，任何接口值都由是一个具体类型和具体类型的值两部分组成的。</p><p>在Go语言中反射的相关功能由内置的reflect包提供，任意接口值在反射中都可以理解为由 reflect.Type 和 reflect.Value两部分组成，并且reflect包提供了reflect.TypeOf和reflect.ValueOf两个重要函数来获取任意对象的Value 和 Type</p><h2 id="reflect-typeof-获取任意值的类型对象" tabindex="-1"><a class="header-anchor" href="#reflect-typeof-获取任意值的类型对象" aria-hidden="true">#</a> reflect.TypeOf()获取任意值的类型对象</h2><p>在Go 语言中，使用reflect.TypeOf（）函数可以接受任意interface}参数，可以获得任意值的类型对象（reflect.Type），程序通过类型对象可以访问任意值的类型信息。</p><p>通过反射获取空接口的类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reflectFun</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">reflectFun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token function">reflectFun</span><span class="token punctuation">(</span><span class="token number">10.01</span><span class="token punctuation">)</span>
	<span class="token function">reflectFun</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
	<span class="token function">reflectFun</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-name-和-type-kind" tabindex="-1"><a class="header-anchor" href="#type-name-和-type-kind" aria-hidden="true">#</a> type name 和 type Kind</h2><p>在反射中关于类型还划分为两种：类型（Type）和种类（Kind）。因为在Go语言中我们可以使用type关键字构造很多自定义类型，而种类（Kid）就是指底层的类型，但在反射中，当需要区分指针、结构体等大品种的类型时，就会用到种类（Kind）。举个例子，我们定义了两个指针类型和两个结构体类型，通过反射查看它们的类型和种类。</p>`,22),k={href:"http://xn--vnqt02au6u.Name",target:"_blank",rel:"noopener noreferrer"},r=a(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;类型 &quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;类型名称 &quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;类型种类 &quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们之前可以通过类型断言来实现空接口类型的数相加操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reflectValue</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> b
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到现在的话，我们就可以使用reflect.TypeOf来实现了</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">reflectValue2</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 通过反射来获取变量的原始值</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token comment">// 获取到V的int类型</span>
	<span class="token keyword">var</span> n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">12</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时我们还可以通过switch来完成</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 通过反射来获取变量的原始值</span>
v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment">// 获取种类</span>
kind <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">switch</span> kind <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;我是int类型&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Float64<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;我是float64类型&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;我是其它类型&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reflect-valueof" tabindex="-1"><a class="header-anchor" href="#reflect-valueof" aria-hidden="true">#</a> reflect.ValueOf</h2><p>reflect.ValueOf() 返回的是reflect.Value类型，其中包含了原始值的值信息，reflect.Value与原始值之间可以互相转换</p><p>reflect.value类型提供的获取原始值的方法如下</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>interface{}</td><td>将值以interface{}类型返回，可以通过类型断言转换为指定类型</td></tr><tr><td>Int() int64</td><td>将值以int类型返回，所有有符号整型均可以此方式返回</td></tr><tr><td>Uint() uint64</td><td>将值以uint类型返回，所有无符号整型均可以以此方式返回</td></tr><tr><td>Float() float64</td><td>将值以双精度(float 64)类型返回，所有浮点数(float 32、float64)均可以以此方式返回</td></tr></tbody></table><h2 id="结构体反射" tabindex="-1"><a class="header-anchor" href="#结构体反射" aria-hidden="true">#</a> 结构体反射</h2><h3 id="与结构体相关的方法" tabindex="-1"><a class="header-anchor" href="#与结构体相关的方法" aria-hidden="true">#</a> 与结构体相关的方法</h3><p>任意值通过reflect.Typeof）获得反射对象信息后，如果它的类型是结构体，可以通过反射值对象（reflect.Type）的NumField（）和Field（）方法获得结构体成员的详细信息。</p><p>reflect.Type中与获取结构体成员相关的的方法如下表所示。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Field(i int)StructField</td><td>根据索引，返回索引对应的结构体字段的信息</td></tr><tr><td>NumField() int</td><td>返回结构体成员字段数量</td></tr><tr><td>FieldByName(name string)(StructField, bool)</td><td>根据给定字符串返回字符串赌赢的结构体字段信息</td></tr><tr><td>FieldByIndex(index []int)StructField</td><td>多层成员访问时，根据[] int 提供的每个结构</td></tr><tr><td></td><td></td></tr></tbody></table><p>示例代码，如下所示 我们修改结构体中的字段和类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 学生结构体</span>
<span class="token keyword">type</span> Student4 <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">\`json: &quot;name&quot;\`</span>
	Age <span class="token builtin">int</span> <span class="token string">\`json: &quot;age&quot;\`</span>
	Score <span class="token builtin">int</span> <span class="token string">\`json: &quot;score&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Student4<span class="token punctuation">)</span><span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">string</span>  <span class="token punctuation">{</span>
	<span class="token keyword">var</span> str <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;姓名：%v 年龄：%v 成绩：%v&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Score<span class="token punctuation">)</span>
	<span class="token keyword">return</span> str
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Student4<span class="token punctuation">)</span><span class="token function">SetInfo</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">,</span> score <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
	s<span class="token punctuation">.</span>Age <span class="token operator">=</span> age
	s<span class="token punctuation">.</span>Score <span class="token operator">=</span> score
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Student4<span class="token punctuation">)</span><span class="token function">PrintStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;打印学生&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 打印结构体中的字段</span>
<span class="token keyword">func</span> <span class="token function">PrintStructField</span><span class="token punctuation">(</span>s <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token comment">// 判断传递过来的是否是结构体</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;请传入结构体类型!&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 通过类型变量里面的Field可以获取结构体的字段</span>
	field0 <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 获取第0个字段</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%#v \\n&quot;</span><span class="token punctuation">,</span> field0<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;字段名称:&quot;</span><span class="token punctuation">,</span> field0<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;字段类型:&quot;</span><span class="token punctuation">,</span> field0<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;字段Tag:&quot;</span><span class="token punctuation">,</span> field0<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// 通过类型变量里面的FieldByName可以获取结构体的字段中</span>
	field1<span class="token punctuation">,</span> ok <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;字段名称:&quot;</span><span class="token punctuation">,</span> field1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;字段类型:&quot;</span><span class="token punctuation">,</span> field1<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;字段Tag:&quot;</span><span class="token punctuation">,</span> field1<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 通过类型变量里面的NumField获取该结构体有几个字段</span>
	<span class="token keyword">var</span> fieldCount <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;结构体有：&quot;</span><span class="token punctuation">,</span> fieldCount<span class="token punctuation">,</span> <span class="token string">&quot; 个属性&quot;</span><span class="token punctuation">)</span>

	<span class="token comment">// 获取结构体属性对应的值</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	nameValue <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nameValue:&quot;</span><span class="token punctuation">,</span> nameValue<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	student <span class="token operator">:=</span> Student4<span class="token punctuation">{</span>
		<span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
		<span class="token number">18</span><span class="token punctuation">,</span>
		<span class="token number">95</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token function">PrintStructField</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下列代码是获取结构体中的方法，然后调用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 打印执行方法</span>
<span class="token keyword">func</span> <span class="token function">PrintStructFn</span><span class="token punctuation">(</span>s <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
	t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token comment">// 判断传递过来的是否是结构体</span>
	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Struct <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;请传入结构体类型!&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 通过类型变量里面的Method，可以获取结构体的方法</span>
	method0 <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token comment">// 获取第一个方法， 这个是和ACSII相关</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>method0<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>

	<span class="token comment">// 通过类型变量获取这个结构体有多少方法</span>
	methodCount <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;拥有的方法&quot;</span><span class="token punctuation">,</span> methodCount<span class="token punctuation">)</span>

	<span class="token comment">// 通过值变量 执行方法（注意需要使用值变量，并且要注意参数）</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token comment">// 通过值变量来获取参数</span>
	v<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">&quot;PrintStudent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>

	<span class="token comment">// 手动传参</span>
	<span class="token keyword">var</span> params <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value
	params <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	params <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	params <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token comment">// 执行setInfo方法</span>
	v<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">&quot;SetInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>

	<span class="token comment">// 通过值变量来获取参数</span>
	v<span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span><span class="token string">&quot;PrintStudent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function d(v,m){const t=i("ExternalLinkIcon");return e(),o("div",null,[l,s("p",null,[n("Go 语言的反射中像数组、切片、Map、指针等类型的变量，"),s("a",k,[n("它们的.Name"),c(t)]),n("（）都是返回空。")]),r])}const g=p(u,[["render",d],["__file","16_Golang中的反射.html.vue"]]);export{g as default};
